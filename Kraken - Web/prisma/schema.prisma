// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  image          String?
  email          String?        @unique
  hashedPassword String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  favoriteIds    String?        @default("")
  isMuted        Boolean        @default(false)
  accounts       Account[]
  roles          String         @default("")
  skipPrompt     Boolean        @default(false)
  Media          Media[]
  Serie_EP       Serie_EP[]
  PendingMedia   PendingMedia[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Media {
  id          String     @id @default(uuid())
  title       String
  altTitle    String?
  languages   String?    @db.LongText
  subtitles   String?    @db.LongText
  type        String
  description String?    @db.LongText
  videoUrl    String     @db.LongText
  thumbUrl    String     @db.LongText
  posterUrl   String?
  genre       String
  duration    String?
  seasons     String?
  createdAt   DateTime   @default(now())
  uploadedBy  String?
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  Serie_EP    Serie_EP[]

  @@fulltext([title, altTitle, description, genre])
  @@fulltext([genre])
}

model PendingMedia {
  id          String     @id @default(uuid())
  title       String
  type        String
  description String?    @db.LongText
  videoUrl    String     @db.LongText
  thumbUrl    String?    @db.LongText
  posterUrl   String?    @db.LongText
  genre       String
  duration    String?
  seasonCount String?
  createdAt   DateTime   @default(now())
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  userName    String?
  Serie_EP    Serie_EP[]
}

model Serie_EP {
  id             String        @id @default(uuid())
  title          String
  serieId        String
  season         String
  episode        String
  videoUrl       String        @db.LongText
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?
  Media          Media?        @relation(fields: [mediaId], references: [id])
  mediaId        String?
  PendingMedia   PendingMedia? @relation(fields: [pendingMediaId], references: [id])
  pendingMediaId String?
}

model Genres {
  id    String @id @default(uuid())
  genre String
}

model Notification {
  id        String   @id @default(uuid())
  recipient String
  content   String   @db.LongText
  type      String?
  status    String
  date      DateTime @default(now())
}
